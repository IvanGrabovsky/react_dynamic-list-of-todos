{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onSelectedTodo","selectedTodo","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","query","setQuery","setStatus","onChange","event","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","useState","user","setUser","useEffect","userId","href","email","name","App","todosFromServer","setTodosFromServer","setSelectedTodo","isLoaded","setIsLoaded","status","visibleTodos","filter","preparedQuery","toLocaleLowerCase","preparedTitle","includes","ReactDOM","render","document","getElementById"],"mappings":"oPAQaA,EAA4B,SAAC,GAAD,IACvCC,EADuC,EACvCA,MACAC,EAFuC,EAEvCA,eACAC,EAHuC,EAGvCA,aAHuC,OAKvC,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,qBAEE,UAAQ,OACRF,UAAWG,IACT,CAAE,6BAAyC,OAAZJ,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOF,EAAKE,KAJ7D,UAOE,oBAAIJ,UAAU,eAAd,SAA8BE,EAAKE,KACnC,oBAAIJ,UAAU,eAAd,SACE,sBAAMA,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAWG,IACZ,aACA,CACE,kBAAmBD,EAAKG,UACxB,mBAAoBH,EAAKG,UACzB,mBAAoBH,EAAKG,UACzB,mBAAoBH,EAAKG,kBAMjC,oBAAIL,UAAU,2BAAd,SACE,mBACEA,UAAWG,IACT,CACE,mBAAoBD,EAAKG,UACzB,mBAAoBH,EAAKG,YAJ/B,SAQGH,EAAKI,UAGV,oBAAIN,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVO,KAAK,SACLC,QACE,YACkB,OAAZT,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOF,EAAKE,GAC5BN,EAAe,MAEfA,EAAeI,IATvB,SAcE,sBAAMF,UAAU,OAAhB,SACE,mBAAGA,UAAWG,IACZ,MACA,CACE,gBAA4B,OAAZJ,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOF,EAAKE,GAC1C,UAAsB,OAAZL,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOF,EAAKE,eArDzCF,EAAKE,aCxBPK,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,UAApB,OACzC,uBAAMZ,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRa,SAAU,SAACC,GAAD,OAAWF,EAAUE,EAAMC,OAAOC,QAF9C,UAIE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGhB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRO,KAAK,OACLP,UAAU,QACViB,YAAY,YACZD,MAAON,EACPG,SAAU,SAACC,GAAD,OAAWH,EAASG,EAAMC,OAAOC,UAE7C,sBAAMhB,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdU,GACC,sBAAMV,UAAU,gBAAgBkB,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRZ,KAAK,SACLP,UAAU,SACVQ,QAAS,kBAAMG,EAAS,gBCtCvBS,G,MAAmB,kBAC9B,qBAAKpB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCInB,SAASqB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICTMC,EAA6B,SAAC,GAAuB,IAArB9B,EAAoB,EAApBA,KAAM+B,EAAc,EAAdA,QACjD,EAAwBC,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KAMA,OAJAC,qBAAU,WDQW,IAACC,KCPZpC,EAAKoC,ODO0BjB,EAAG,iBAAiBiB,KCPtCV,KAAKQ,KACzB,IAGD,sBAAKpC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEbmC,EAGA,sBAAKnC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYE,EAAKE,MAIjB,wBACEG,KAAK,SACLP,UAAU,SACV,UAAQ,cACRQ,QAASyB,OAIb,sBAAKjC,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGE,EAAKI,QAGR,oBAAGN,UAAU,QAAQ,UAAQ,aAA7B,UACGE,EAAKG,UACJ,wBAAQL,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAGD,OAED,mBAAGuC,KAAI,wBAAYJ,QAAZ,IAAYA,OAAZ,EAAYA,EAAMK,OAAzB,gBACGL,QADH,IACGA,OADH,EACGA,EAAMM,gBAnCf,cAAC,EAAD,QCVKC,EAAgB,WAC3B,MAA8CR,mBAAiB,IAA/D,mBAAOS,EAAP,KAAwBC,EAAxB,KACA,EAAwCV,mBAAsB,MAA9D,mBAAOnC,EAAP,KAAqB8C,EAArB,KACA,EAAgCX,oBAAS,GAAzC,mBAAOY,EAAP,KAAiBC,EAAjB,KACA,EAA0Bb,mBAAS,IAAnC,mBAAOxB,EAAP,KAAcC,EAAd,KACA,EAA4BuB,mBAAiB,OAA7C,mBAAOc,EAAP,KAAepC,EAAf,KAEAyB,qBAAU,WFAkBhB,EAAY,UEEnCO,KAAKgB,GACLhB,MAAK,kBAAMmB,GAAY,QACzB,IAEH,IAAME,EAAeN,EAAgBO,QAAO,SAAAhD,GAC1C,IAAMiD,EAAgBzC,EAAM0C,oBACtBC,EAAgBnD,EAAKI,MAAM8C,oBAEjC,OAAQJ,GACN,IAAK,SACH,OAAQ9C,EAAKG,WACRgD,EACAC,SAASH,GAChB,IAAK,YACH,OAAOjD,EAAKG,WACPgD,EACAC,SAASH,GAEhB,QACE,OAAOE,EACJC,SAASH,OAIlB,OACE,qCACE,qBAAKnD,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEU,MAAOA,EACPC,SAAUA,EACVC,UAAWA,MAIf,qBAAKZ,UAAU,QAAf,SACI8C,EAGE,cAAC,EAAD,CACEjD,MAAOoD,EACPnD,eAAgB+C,EAChB9C,aAAcA,IALf,cAAC,EAAD,aAaZA,GACC,cAAC,EAAD,CACEG,KAAMH,EACNkC,QAAS,kBAAMY,EAAgB,aC1EzCU,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f4401387.chunk.js","sourcesContent":["import classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  onSelectedTodo: (todo: Todo | null) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelectedTodo,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          key={todo.id}\n          data-cy=\"todo\"\n          className={classNames(\n            { 'has-background-info-light': selectedTodo?.id === todo.id },\n          )}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            <span className=\"icon\" data-cy=\"iconCompleted\">\n              <i className={classNames(\n                'fa-regular',\n                {\n                  'fa-circle-check': todo.completed,\n                  'has-text-success': todo.completed,\n                  'fa-circle-xmark': !todo.completed,\n                  'has-text-danger': !todo.completed,\n                },\n              )}\n              />\n            </span>\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames(\n                {\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                },\n              )}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={\n                () => {\n                  if (selectedTodo?.id === todo.id) {\n                    onSelectedTodo(null);\n                  } else {\n                    onSelectedTodo(todo);\n                  }\n                }\n              }\n            >\n              <span className=\"icon\">\n                <i className={classNames(\n                  'far',\n                  {\n                    'fa-eye-slash': selectedTodo?.id === todo.id,\n                    'fa-eye': selectedTodo?.id !== todo.id,\n                  },\n                )}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","type Props = {\n  query: string;\n  setQuery: (query: string) => void;\n  setStatus: (status: Status) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({ query, setQuery, setStatus }) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={(event) => setStatus(event.target.value as Status)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo,\n  onClose: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(todo.userId).then(setUser);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState<Status>('all');\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodosFromServer)\n      .then(() => setIsLoaded(true));\n  }, []);\n\n  const visibleTodos = todosFromServer.filter(todo => {\n    const preparedQuery = query.toLocaleLowerCase();\n    const preparedTitle = todo.title.toLocaleLowerCase();\n\n    switch (status) {\n      case 'active':\n        return !todo.completed\n          && preparedTitle\n            .includes(preparedQuery);\n      case 'completed':\n        return todo.completed\n          && preparedTitle\n            .includes(preparedQuery);\n\n      default:\n        return preparedTitle\n          .includes(preparedQuery);\n    }\n  });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                setStatus={setStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isLoaded\n                ? (<Loader />)\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    onSelectedTodo={setSelectedTodo}\n                    selectedTodo={selectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={() => setSelectedTodo(null)}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}